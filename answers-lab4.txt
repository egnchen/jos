> Compare kern/mpentry.S side by side with boot/boot.S. Bearing in mind that kern/mpentry.S is compiled and linked to run above KERNBASE just like everything else in the kernel, what is the purpose of macro MPBOOTPHYS?
> Why is it necessary in kern/mpentry.S but not in boot/boot.S?
> In other words, what could go wrong if it were omitted in kern/mpentry.S?
> 
> Hint: recall the differences between the link address and the load address that we have discussed in Lab 1.

Because the assembly code in `kern/mpentry.S` is explicitly copied to `MPBOOT_PADDR` after kernel started. `MPBOOTPHYS` is used to calculate the location of all those symbols relative to `MPBOOT_PADDR`, instead of its original location in kernel.

It's necessary in `mpentry.S` because `boot.S` is never copied.

> It seems that using the big kernel lock guarantees that only one CPU can run the kernel code at a time.
> Why do we still need separate kernel stacks for each CPU?
> Describe a scenario in which using a shared kernel stack will go wrong, even with the protection of the big kernel lock.

When different CPUs are doing different jobs in the kernel at the same time.

For example, at boot time when BSP is waiting for other APs to boot and each AP is doing its own initialization. Or when different CPUs are executing different environments & handling different syscalls.

> In your implementation of env_run() you should have called lcr3().
> Before and after the call to lcr3(), your code makes references (at least it should) to the variable e, the argument to env_run.
> Upon loading the %cr3 register, the addressing context used by the MMU is instantly changed.
> But a virtual address (namely e) has meaning relative to a given address context--the address context specifies the physical address to which the virtual address maps.
> Why can the pointer e be dereferenced both before and after the addressing switch?

Because every environment have the same mapping above UTOP, which is the kernel space.

> Whenever the kernel switches from one environment to another, it must ensure the old environment's registers are saved so they can be restored properly later.
> Why? Where does this happen?

Because only in this way we can resume the environment properly afterwards. These registers are saved into current environment's TrapFrame struct upon entering kernel.